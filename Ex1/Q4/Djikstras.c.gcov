        -:    0:Source:Djikstras.c
        -:    0:Graph:Djikstras.gcno
        -:    0:Data:Djikstras.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdbool.h>
        -:    3:#include <limits.h>
        -:    4:
        -:    5:#define V_MAX 100
        -:    6:
    #####:    7:int minDistance(int dist[], bool sptSet[], int V) {
    #####:    8:    int min = INT_MAX, min_index;
        -:    9:
    #####:   10:    for (int v = 0; v < V; v++) {
    #####:   11:        if (!sptSet[v] && dist[v] <= min) {
    #####:   12:            min = dist[v];
    #####:   13:            min_index = v;
        -:   14:        }
        -:   15:    }
        -:   16:
    #####:   17:    return min_index;
        -:   18:}
        -:   19:
    #####:   20:void printSolution(int dist[], int V) {
    #####:   21:    printf("Vertex \t Distance from Source\n");
    #####:   22:    for (int i = 0; i < V; i++) {
    #####:   23:        printf("%d \t\t\t\t %d\n", i, dist[i]);
        -:   24:    }
    #####:   25:}
        -:   26:
    #####:   27:void dijkstra(int graph[V_MAX][V_MAX], int src, int V) {
    #####:   28:    int dist[V];
    #####:   29:    bool sptSet[V];
        -:   30:
    #####:   31:    for (int i = 0; i < V; i++) {
    #####:   32:        dist[i] = INT_MAX;
    #####:   33:        sptSet[i] = false;
        -:   34:    }
        -:   35:
    #####:   36:    dist[src] = 0;
        -:   37:
    #####:   38:    for (int count = 0; count < V - 1; count++) {
    #####:   39:        int u = minDistance(dist, sptSet, V);
    #####:   40:        sptSet[u] = true;
        -:   41:
    #####:   42:        for (int v = 0; v < V; v++) {
    #####:   43:            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
    #####:   44:                dist[v] = dist[u] + graph[u][v];
        -:   45:            }
        -:   46:        }
        -:   47:    }
        -:   48:
    #####:   49:    printSolution(dist, V);
    #####:   50:}
        -:   51:
        1:   52:int main() {
        -:   53:    int option;
        1:   54:    int graph[V_MAX][V_MAX] = {0};
        1:   55:    int V = 0;
        -:   56:
        -:   57:    while (1) {
        1:   58:        printf("Options:\n1. Create new graph\n2. Modify existing graph\n3. Find shortest path\n4. Exit\nChoose an option: ");
        1:   59:        scanf("%d", &option);
        -:   60:
        1:   61:        if (option == 1) {
    #####:   62:            printf("Enter the number of vertices in the graph: ");
    #####:   63:            scanf("%d", &V);
        -:   64:
    #####:   65:            printf("Enter the weight of the edges in the adjacency matrix (enter 0 for no edge):\n");
    #####:   66:            for (int i = 0; i < V; i++) {
    #####:   67:                for (int j = 0; j < V; j++) {
    #####:   68:                    printf("Edge weight from vertex %d to vertex %d: ", i, j);
    #####:   69:                    scanf("%d", &graph[i][j]);
    #####:   70:                    if (graph[i][j] < 0) {
    #####:   71:                        printf("Invalid input. Please enter a non-negative weight or -1 for no edge.\n");
    #####:   72:                        j--; // Repeat the input for this edge
        -:   73:                    }
        -:   74:                }
        -:   75:            }
        1:   76:        } else if (option == 2) {
    #####:   77:            if (V == 0) {
    #####:   78:                printf("Graph not yet created. Please create a new graph first.\n");
    #####:   79:                continue;
        -:   80:            }
        -:   81:
        -:   82:            int u, v, weight;
    #####:   83:            printf("Enter the source vertex: ");
    #####:   84:            scanf("%d", &u);
    #####:   85:            printf("Enter the destination vertex: ");
    #####:   86:            scanf("%d", &v);
    #####:   87:            printf("Enter the new weight of the edge: ");
    #####:   88:            scanf("%d", &weight);
        -:   89:
    #####:   90:            if (u < 0 || u >= V || v < 0 || v >= V || weight < 0) {
    #####:   91:                printf("Invalid input. Please enter valid values.\n");
    #####:   92:                continue;
        -:   93:            }
        -:   94:
    #####:   95:            graph[u][v] = weight;
    #####:   96:            graph[v][u] = weight;
        1:   97:        } else if (option == 3) {
    #####:   98:            if (V == 0) {
    #####:   99:                printf("Graph not yet created. Please create a new graph first.\n");
    #####:  100:                continue;
        -:  101:            }
        -:  102:
        -:  103:            int src;
    #####:  104:            printf("Enter the source vertex for shortest path calculation: ");
    #####:  105:            scanf("%d", &src);
        -:  106:
    #####:  107:            if (src < 0 || src >= V) {
    #####:  108:                printf("Invalid source vertex. Please enter a valid vertex.\n");
    #####:  109:                continue;
        -:  110:            }
        -:  111:
    #####:  112:            dijkstra(graph, src, V);
        1:  113:        } else if (option == 4) {
        1:  114:            break;
        -:  115:        } else {
    #####:  116:            printf("Invalid option. Please choose a valid option.\n");
        -:  117:        }
        -:  118:    }
        -:  119:
        1:  120:    return 0;
        -:  121:}
        -:  122:
